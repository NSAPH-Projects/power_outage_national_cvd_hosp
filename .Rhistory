'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# load necessary libraries
pacman::p_load(here, logger)
# init log
log_appender(appender_console)
log_threshold(INFO)
# function to source a script and clean up
source_and_clean <- function(script_path) {
log_info(paste("Sourcing:", script_path))
source(script_path, echo = TRUE)
rm(list = ls())
gc()
log_info(paste("Completed:", script_path))
}
# start timing
start_time <- Sys.time()
log_info('Preparing to clean power outage data.')
# define the scripts to be sourced using `here`
scripts <- list(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b03_attach_denoms.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b04_id_outages_continuous_measures.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
)
)
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
# load necessary libraries
pacman::p_load(here, logger)
# init log
log_appender(appender_console)
log_threshold(INFO)
# function to source a script and clean up
source_and_clean <- function(script_path) {
log_info(paste("Sourcing:", script_path))
source(script_path, echo = TRUE)
rm(list = ls())
gc()
log_info(paste("Completed:", script_path))
}
# start timing
start_time <- Sys.time()
log_info('Preparing to clean power outage data.')
# define the scripts to be sourced using `here`
scripts <- list(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b03_attach_denoms.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b04_id_outages_continuous_measures.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_cust_est.R'
)
)
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_cust_est.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
)
)
rm()
gc()
print('Prepared to expand data.')
print('Running read and clean.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
echo = T
)
rm()
gc()
print('Expanding power outage data to hourly.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
echo = T
)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
script = scripts[[1]]
script = scripts[[2]]
script
source_and_clean(script)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b05_identify_daily_binary_exposure.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b06_identify_outages_percentile.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
# stop timing
stop_time <- Sys.time()
log_info(paste0('Total run time was ', round(
difftime(stop_time, start_time, units = "mins"), 2
), ' minutes'))
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a00_define_contiguous_US.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a01_find_eia_state_customers.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a02_get_county_census_cust_est.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a03_county_customer_census_estimates.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a02_get_county_census_cust_est.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a03_county_customer_census_estimates.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a01_find_eia_state_customers.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a02_get_county_census_cust_est.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a03_county_customer_census_estimates.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a03_county_customer_census_estimates.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b01_read_and_clean.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b03_attach_denoms.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b04_id_outages_continuous_measures.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b05_identify_daily_binary_exposure.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b06_identify_outages_percentile.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
write_fst(hrs_out, here(
'data_for_upload',
'power_outage_exposure_data_cleaning_output',
'daily_hrs_out_oct_31.fst'
))
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
source(here('code', 'functions', 'expand_to_hourly_helpers.R'))
counties <-
read_fst(here("local_data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = downscaled_county_estimate
)]
# identify continuous hours out per day for different cut points
counties <- identify_power_outage_on_all_counties(counties, cut_point = 0.005)
counties <- identify_power_outage_on_all_counties(counties, cut_point = 0.01)
counties <- identify_power_outage_on_all_counties(counties, cut_point = 0.03)
counties <- identify_power_outage_on_all_counties(counties, cut_point = 0.05)
setDT(counties)
counties[, day := lubridate::floor_date(hour, unit = 'day')]
hrs_out <- counties[, .(
n_hrs_out_0.005 = sum(po_on_0.005, na.rm = TRUE),
n_hrs_out_0.01 = sum(po_on_0.01, na.rm = TRUE),
n_hrs_out_0.03 = sum(po_on_0.03, na.rm = TRUE),
n_hrs_out_0.05 = sum(po_on_0.05, na.rm = TRUE)
), by = .(five_digit_fips, day)]
write_fst(hrs_out, here(
'data_for_upload',
'power_outage_exposure_data_cleaning_output',
'daily_hrs_out_oct_31.fst'
))
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b05_identify_daily_binary_exposure.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
View(all_exposures)
length(all_exposure$five_digit_fips)
length(all_exposures$five_digit_fips)
length(unique(all_exposures$five_digit_fips))
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/00_run_all.R", echo=TRUE)
# This script creates files that have
# a) a crosswalk of state fips codes, county fips codes, state abbreviations,
# and state names for counties we wish to capture in the POUS dataset because
# they are in the contiguous US
# b) a list of counties and five-digit county fips codes that are in the
# contiguous US
# c) a shapefile of county boundaries for those counties in the contiguous US
# that we're aiming to include
# Last updated: Oct 3rd, 2024
# Author: Heather
pacman::p_load(sf, here, tidyverse, data.table, arrow)
# set shapefile for whole project
# states we wish to include: just being very clear about this list
cotus_state_fips_abbrev <- data.frame(
state_fips =
c("01", "04", "05", "06", "08", "09", "10", "12", "13", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
"31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42",
"44", "45", "46", "47", "48", "49", "50", "51", "53", "54", "55", "56",
"02", "15"),
state_ab =
c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID", "IL", "IN",
"IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT",
"NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
"RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY",
"AK", "HI"),
state_name =
c("Alabama", "Arizona", "Arkansas", "California", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia", "Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
"Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York",
"North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
"Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington",
"West Virginia", "Wisconsin", "Wyoming",
"Alaska", "Hawaii"),
stringsAsFactors = FALSE
)
write_rds(cotus_state_fips_abbrev, here("data_for_upload", 'cotus_state_fips_abbrev.RDS'))
# get and filter shapefile to that set of counties
county_shp <- tigris::counties(year = 2020) # get
pacman::p_load(sf, here, tidyverse, data.table, arrow)
# set shapefile for whole project
# states we wish to include: just being very clear about this list
cotus_state_fips_abbrev <- data.frame(
state_fips =
c("01", "04", "05", "06", "08", "09", "10", "12", "13", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
"31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42",
"44", "45", "46", "47", "48", "49", "50", "51", "53", "54", "55", "56",
"02", "15"),
state_ab =
c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID", "IL", "IN",
"IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT",
"NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
"RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY",
"AK", "HI"),
state_name =
c("Alabama", "Arizona", "Arkansas", "California", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia", "Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
"Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York",
"North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
"Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington",
"West Virginia", "Wisconsin", "Wyoming",
"Alaska", "Hawaii"),
stringsAsFactors = FALSE
)
write_rds(cotus_state_fips_abbrev, here("data_for_upload", 'cotus_state_fips_abbrev.RDS'))
# get and filter shapefile to that set of counties
county_shp <- tigris::counties(year = 2020) # get
county_shp <- county_shp |> # save relevant info only
mutate(five_digit_fips = paste0(STATEFP, COUNTYFP)) |>
select(five_digit_fips,
state_fips = STATEFP,
county_fips = COUNTYFP,
county_name = NAME)
county_shp <- county_shp |>
filter(state_fips %in% cotus_state_fips_abbrev$state_fips)
# reproject to albers
epsg_code <- 5070
county_shp <- st_transform(county_shp, crs = epsg_code)
# write
write_parquet(county_shp,
here("data_for_upload", "cotus_county_shp_w_fips.parquet"))
# write
st_write(sf_data, "output_file.gpkg", driver = "GPKG")
# write
st_write(county_shp, here("data_for_upload", "cotus_county_shp_w_fips.gpkg"), driver = "GPKG")
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/a00_define_contiguous_US.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/00_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/00_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/00_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/00_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b05_identify_daily_binary_exposure.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b06_identify_outages_percentile.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
