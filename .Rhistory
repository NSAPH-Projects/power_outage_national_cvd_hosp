"power_outage_exposure_data_cleaning_output",
"hourly_county"
),
pattern = "*.fst",
full.names = TRUE
)
hourly <- lapply(counties, read_fst)
hourly <- rbindlist(hourly)
# reduce to just customer estimates
pous_based_estimates <- hourly %>%
select(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
customers_served_county,
county_person_time_missing_hours,
) %>% distinct()
# Do ----------------------------------------------------------------------
pous_based_estimates <- pous_based_estimates %>% left_join(eia_estimates)
# mark when the pous data looks like it has an error
pous_based_estimates <- pous_based_estimates %>%
mutate(
too_big = case_when(
is.na(downscaled_county_estimate) ~ 0,
customers_served_county > downscaled_county_estimate ~
customers_served_county /
downscaled_county_estimate,
T ~ 0
)
)
# select the appropriate columns
pous_based_estimates <- pous_based_estimates[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_served_county,
county_person_time_missing_hours,
downscaled_county_estimate,
too_big
)]
View(pous_based_estimates)
# This script joins customer estimates from EIA to the live customer estimate
# data, and calculates person-coverage. Person-coverage is calculated based on
# two numbers. The first is the maximum number of customers recorded as ‘out’
# or ‘tracked’ in the POUS dataset. The second is the estimate of the number of
# customers that should be in that county based on the households and number of
# establishments in that county, and the number of electrical customers in the
# state from EIA. If recorded customers in the POUS data were > 2x the EIA
# estimates, coverage was just reported as 1. Otherwise it’s POUS estimate/EIA
# estimate.
# Author: Heather
# Last updated: Oct 4th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, zoo, data.table, fst)
my.max <- function(x)
ifelse(!all(is.na(x)), max(x, na.rm = T), NA)
person_coverage_threshold <- 0.5
# Do ----------------------------------------------------------------------
# read in EIA estimates downscaled to the county level in an earlier script
eia_estimates <-
read_rds(
here(
"data",
"power_outage_exposure_data_cleaning_output",
"downscaled_county_customer_estimates.RDS"
)
) %>%
select(year, five_digit_fips, downscaled_county_estimate)
# read in counties hourly data
counties <-
list.files(
here(
"data",
"power_outage_exposure_data_cleaning_output",
"hourly_county"
),
pattern = "*.fst",
full.names = TRUE
)
hourly <- lapply(counties, read_fst)
hourly <- rbindlist(hourly)
# reduce to just customer estimates
pous_based_estimates <- hourly %>%
select(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
customers_served_county,
county_person_time_missing_hours,
) %>% distinct()
View(pous_based_estimates)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b03_attach_denoms.R", echo=TRUE)
# This script runs the power outage data cleaning pipeline.
# load necessary libraries
pacman::p_load(here, logger)
# init log
log_appender(appender_console)
log_threshold(INFO)
# function to source a script and clean up
source_and_clean <- function(script_path) {
log_info(paste("Sourcing:", script_path))
source(script_path, echo = TRUE)
rm(list = ls())
gc()
log_info(paste("Completed:", script_path))
}
# start timing
start_time <- Sys.time()
log_info('Preparing to clean power outage data.')
# define the scripts to be sourced using `here`
scripts <- list(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b03_attach_denoms.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b04_id_outages_continuous_measures.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# load necessary libraries
pacman::p_load(here, logger)
# init log
log_appender(appender_console)
log_threshold(INFO)
# function to source a script and clean up
source_and_clean <- function(script_path) {
log_info(paste("Sourcing:", script_path))
source(script_path, echo = TRUE)
rm(list = ls())
gc()
log_info(paste("Completed:", script_path))
}
# start timing
start_time <- Sys.time()
log_info('Preparing to clean power outage data.')
# define the scripts to be sourced using `here`
scripts <- list(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b03_attach_denoms.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b04_id_outages_continuous_measures.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
)
)
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
# load necessary libraries
pacman::p_load(here, logger)
# init log
log_appender(appender_console)
log_threshold(INFO)
# function to source a script and clean up
source_and_clean <- function(script_path) {
log_info(paste("Sourcing:", script_path))
source(script_path, echo = TRUE)
rm(list = ls())
gc()
log_info(paste("Completed:", script_path))
}
# start timing
start_time <- Sys.time()
log_info('Preparing to clean power outage data.')
# define the scripts to be sourced using `here`
scripts <- list(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b03_attach_denoms.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b04_id_outages_continuous_measures.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b05_identify_binary_daily_exposure.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b06_identify_outages_percentile.R'
),
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b07_create_exposure_data_for_upload.R'
)
)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_cust_est.R'
)
)
# This script runs the power outage data cleaning pipeline.
pacman::p_load(here)
start_time <- Sys.time()
print('Preparing to clean power outage data.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a00_define_contiguous_US.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a01_find_eia_state_customers.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a02_get_county_census_cust_est.R'
)
)
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'a03_county_customer_census_estimates.R'
)
)
rm()
gc()
print('Prepared to expand data.')
print('Running read and clean.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b01_read_and_clean.R'
),
echo = T
)
rm()
gc()
print('Expanding power outage data to hourly.')
source(
here(
'code',
'data_prep',
'power_outage_exposure_data_prep',
'b02_expand_to_hourly.R'
),
echo = T
)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
# source each script and clean up
for (script in scripts) {
source_and_clean(script)
}
script = scripts[[1]]
script = scripts[[2]]
script
source_and_clean(script)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/alt_run_all.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b05_identify_daily_binary_exposure.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b06_identify_outages_percentile.R", echo=TRUE)
source("/Volumes/squirrel-utopia/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/b07_create_exposure_data_for_upload.R", echo=TRUE)
# stop timing
stop_time <- Sys.time()
log_info(paste0('Total run time was ', round(
difftime(stop_time, start_time, units = "mins"), 2
), ' minutes'))
