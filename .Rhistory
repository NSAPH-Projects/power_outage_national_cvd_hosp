TRUE ~ 0
)) %>%
select(five_digit_fips, day, exposed) %>%
group_by(five_digit_fips, day) %>%
summarise(exposed = max(exposed))
return(exposed_days)}
# create backbone ---------------------------------------------------------
return_exposure <- function(exposed_days, counties) {
frame <- counties %>%
mutate(day = floor_date(hour, unit = 'day')) %>%
select(clean_state_name, clean_county_name, five_digit_fips, day) %>%
distinct()
frame <- frame %>% left_join(exposed_days)
return(frame)
}
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
start <- Sys.time()
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
# Do ----------------------------------------------------------------------
get_exposure <- function(counties, cut_point, outage_duration) {
counties <- id_power_outage_on(counties, cut_point = 0.01)
po_durations <- get_po_durations(counties, outage_duration = outage_duration)
start_end_dates <- get_start_and_end_dates(counties)
durations_and_dates <- get_durations_and_dates(
counties = counties,
po_durations = po_durations,
start_end_dates = start_end_dates
)
exposed_days <- get_exposed_days(counties,
po_durations = po_durations,
start_end_dates = start_end_dates)
exposure <- return_exposure(exposed_days = exposed_days, counties = counties)
return(exposure)
}
# id power outage on ------------------------------------------------------
id_power_outage_on <- function(counties, cut_point){
col_name <- paste0("po_on_", cut_point)
counties[, cutoff := customers_served_total * cut_point, by = five_digit_fips]
counties[, po_on := case_when(customers_out_hourly > cutoff ~ 1, TRUE ~ 0),
by = five_digit_fips]
counties[, po_id := case_when((po_on == 1) & (lag(po_on) == 0) ~ 1, TRUE ~ 0),
by = five_digit_fips]
counties[, po_id := case_when(po_on == 1 ~ cumsum(po_id), TRUE ~ 0),
by = five_digit_fips]
counties[, (col_name) := po_on]
counties[, po_id_fips_combo := paste0(five_digit_fips, po_id)]
return(counties)}
# ID po durations ---------------------------------------------------------
get_po_durations <- function(counties, outage_duration){
po_durations <- counties[po_id != 0]
po_durations <- po_durations[, .SD[c(1, .N)], by = c('clean_state_name',
'clean_county_name',
'five_digit_fips',
'po_id')]
po_durations[, duration := difftime(lead(hour), hour, units = 'hours'),
by = c('clean_state_name',
'clean_county_name',
'five_digit_fips',
'po_id')]
po_durations <- po_durations[, .SD[1], by = c('clean_state_name',
'clean_county_name',
'five_digit_fips',
'po_id')]
setnames(po_durations, old = "hour", new = "start_time")
po_durations <- po_durations[duration >= outage_duration]
po_durations <- po_durations[, list(clean_state_name,
clean_county_name,
five_digit_fips,
po_id,
start_time,
duration)]
po_durations[, po_id_fips_combo := paste0(five_digit_fips, po_id)]}
# ID start and end dates --------------------------------------------------
get_start_and_end_dates <- function(counties) {
po_st_nd_2 <- counties %>%
filter(po_id_fips_combo %in% po_durations$po_id_fips_combo) %>%
mutate(day = date(hour)) %>%
select(
clean_state_name,
clean_county_name,
five_digit_fips,
day,
po_id,
po_id_fips_combo
) %>%
distinct()
# fill in days in between
if (dim(po_st_nd_2)[[1]] > 0) {
po_st_nd_2 <- po_st_nd_2 %>%
group_by(po_id) %>%
padr::pad(interval = "day")
}
# marks day numbers of each power outage longer than duration
po_st_nd_2 <- po_st_nd_2 %>%
group_by(clean_state_name,
clean_county_name,
five_digit_fips,
po_id,
po_id_fips_combo) %>%
mutate(day_number = row_number()) %>%
mutate(n_days = n()) %>%
mutate(day_counter = case_when(day_number == 1 ~ 1, day_number > 1 &
day_number < n_days ~ 2, TRUE ~ 3)) %>%
select(day, po_id_fips_combo, day_counter) %>%
ungroup()
return(po_st_nd_2)
}
# working here ------------------------------------------------------------
get_durations_and_dates <- function(counties, po_durations, start_end_dates){
durations_and_dates <- counties %>%
mutate(day = floor_date(hour, unit = 'day')) %>%
select(clean_state_name, clean_county_name, day, five_digit_fips, po_id_fips_combo) %>%
distinct() %>%
group_by(po_id_fips_combo) %>%
padr::pad(interval = 'day', break_above = 500000000) %>%
ungroup() %>%
tidyr::fill(clean_state_name, clean_county_name, five_digit_fips)
durations_and_dates <- durations_and_dates %>%
left_join(po_durations) %>%
left_join(start_end_dates)
return(durations_and_dates)
}
get_exposed_days <- function(durations_and_dates){
# this heavily depends on the days before and after, or does it??
exposed_days <- durations_and_dates %>%
mutate(cut_time = as_datetime(day) + days(1) - outage_duration) %>%
mutate(start_before_cut = start_time < cut_time) %>%
# line below is tricky - to get correct cut point, need to add a day to
# get 12 midnight the next day, and then subtract the desired duration
mutate(exposed = case_when(((day_counter == 1) &
start_before_cut) ~ 1,
day_counter == 2 ~ 1,
day_counter == 3 ~ 1,
TRUE ~ 0
)) %>%
select(five_digit_fips, day, exposed) %>%
group_by(five_digit_fips, day) %>%
summarise(exposed = max(exposed))
return(exposed_days)}
# create backbone ---------------------------------------------------------
return_exposure <- function(exposed_days, counties) {
frame <- counties %>%
mutate(day = floor_date(hour, unit = 'day')) %>%
select(clean_state_name, clean_county_name, five_digit_fips, day) %>%
distinct()
frame <- frame %>% left_join(exposed_days)
return(frame)
}
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
start <- Sys.time()
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
start <- Sys.time()
counties <- id_power_outage_on(counties, cut_point = 0.01)
po_durations <- get_po_durations(counties, outage_duration = outage_duration)
# Identify power outage events, defining power outage based on cut point
# percentage of customers out and a duration.
# Author: Heather
# Created: sometime in 2022
# Last updated: Oct 7th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
# Read --------------------------------------------------------------------
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
cut_point = 0.01
counties <- id_power_outage_on(counties, cut_point = 0.01)
po_durations <- get_po_durations(counties, outage_duration = outage_duration)
outage_duration = hours(8)
po_durations <- get_po_durations(counties, outage_duration = outage_duration)
start_end_dates <- get_start_and_end_dates(counties)
durations_and_dates <- get_durations_and_dates(
counties = counties,
po_durations = po_durations,
start_end_dates = start_end_dates
)
exposed_days <- get_exposed_days(counties,
po_durations = po_durations,
start_end_dates = start_end_dates)
exposed_days <- get_exposed_days(durations_and_dates)
exposure <- return_exposure(exposed_days = exposed_days, counties = counties)
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
# Identify power outage events, defining power outage based on cut point
# percentage of customers out and a duration.
# Author: Heather
# Created: sometime in 2022
# Last updated: Oct 7th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
# Read --------------------------------------------------------------------
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
start <- Sys.time()
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
start <- Sys.time()
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
start <- Sys.time()
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
end <- Sys.time()
end - start
colnames(exposure)
colnames(one)
exposure_col <- paste0("exposed_", outage_duration, '_hrs_', cut_point)
outage_duration = hours(8)
cut_point = 0.01
exposure_col <- paste0("exposed_", outage_duration, '_hrs_', cut_point)
exposure_col
as.numeric(hours(8))
hours(8)[[1]]
paste0(hours(8))
paste0(hours(8))[[1]]
paste0(hours(8))[1]
strsub(start = 1, end = 1, paste0(hours(8)))
stringr::strsub(start = 1, end = 1, paste0(hours(8)))
stringr::substr(start = 1, end = 1, paste0(hours(8)))
stringr::str_sub(start = 1, end = 1, paste0(hours(8)))
# get name for exposure col based on parameters
exposure_col <- paste0("exposed_",
stringr::str_sub(
start = 1,
end = 1,
paste0(outage_duration),
'_hrs_',
cut_point
))
# get name for exposure col based on parameters
exposure_col <- paste0("exposed_",
stringr::str_sub(
start = 1,
end = 1,
paste0(outage_duration)),
'_hrs_',
cut_point
)
exposure_col
colnames(one)
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
frame <- frame %>% rename({{ exposure_col }} := exposed)
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
source(here("code", 'functions', 'helpers_days_exposed_unexposed.R'))
# Identify power outage events, defining power outage based on cut point
# percentage of customers out and a duration.
# Author: Heather
# Created: sometime in 2022
# Last updated: Oct 7th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
source(here("code", 'functions', 'helpers_days_exposed_unexposed.R'))
# Read --------------------------------------------------------------------
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
# Get exposures -----------------------------------------------------------
one <- get_exposure(counties, cut_point = 0.01, outage_duration = hours(8))
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
# Identify power outage events, defining power outage based on cut point
# percentage of customers out and a duration.
# Author: Heather
# Created: sometime in 2022
# Last updated: Oct 7th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
source(here("code", 'functions', 'helpers_days_exposed_unexposed.R'))
# Read --------------------------------------------------------------------
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
# Get exposures -----------------------------------------------------------
# 8 hrs all cut points
dt_8_0.005 <-
get_exposure(counties, cut_point = 0.005, outage_duration = hours(8))
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/functions/helpers_days_exposed_unexposed.R")
# 8 hrs all cut points
dt_8_0.005 <-
get_exposure(counties, cut_point = 0.005, outage_duration = hours(8))
View(dt_8_0.005)
sum(dt_8_0.005$exposed_8_hrs_0.005 == 1)
20912/385000
colnames(dt_8_0.005)
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/draft_test_play.R")
?lapply
exposure_8_hrs <- lapply(cut_points, function(cut_point) {
get_exposure(counties, cut_point, outage_duration = hours(8))  # Example outage_duration
})
# Identify power outage events, defining power outage based on cut point
# percentage of customers out and a duration.
# Author: Heather
# Created: sometime in 2022
# Last updated: Oct 7th, 2024
# Libraries ---------------------------------------------------------------
pacman::p_load(tidyverse, here, lubridate, data.table, fst)
source(here("code", 'functions', 'helpers_days_exposed_unexposed.R'))
# Read --------------------------------------------------------------------
counties <-
read_fst(here("data",
"power_outage_exposure_data_cleaning_output",
"hourly_data_with_coverage_exclusions.fst")) |>
as.data.table()
counties <-
counties[, .(
clean_state_name,
clean_county_name,
five_digit_fips,
year,
hour,
customers_out_hourly = customers_out_hourly_locf,
customers_served_total = customers_served_estimate_to_use
)]
# Get exposures -----------------------------------------------------------
# call the get_exposure function from helpers, on all cut points and durations
# of interest.
cut_points <- c(0.005, 0.01, 0.03, 0.05)
exposure_8_hrs <- lapply(cut_points, function(cut_point) {
get_exposure(counties, cut_point, outage_duration = hours(8))  # Example outage_duration
})
exposure_12_hrs <- lapply(cut_points, function(cut_point) {
get_exposure(counties, cut_point, outage_duration = hours(12))  # Example outage_duration
})
exposure_4_hrs <- lapply(cut_points, function(cut_point) {
get_exposure(counties, cut_point, outage_duration = hours(4))  # Example outage_duration
})
all_exposures <- list(exposure_8_hrs, exposure_4_hrs, exposure_12_hrs)
combined_df <- Reduce(function(x, y)
merge(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
saveRDS(
combined_df,
here(
"data",
"power_outage_exposure_data_cleaning_output",
"all_days_exposed_unexposed.RDS"
)
)
View(combined_df)
?merge
combined_df <- combined_df %>% select(
clean_state_name,
clean_county_name,
five_digit_fips,
exposed_8_hrs_0.005,
exposed_8_hrs_0.01,
exposed_8_hrs_0.03,
exposed_8_hrs_0.05,
exposed_4_hrs_0.005,
exposed_4_hrs_0.01,
exposed_8_hrs_0.03,
exposed_4_hrs_0.05,
exposed_1_hrs_0.005,
exposed_1_hrs_0.01,
exposed_1_hrs_0.03,
exposed_8_hrs_0.05
)
saveRDS(
combined_df,
here(
"data",
"power_outage_exposure_data_cleaning_output",
"all_days_exposed_unexposed.RDS"
)
)
dim(exposure_4_hrs[[1]])
dim(combiend_df)
dim(combined_df)
grep("^exposed", names(result), value = TRUE)
grep("^exposed", names(combined_df), value = TRUE)
combined_df <- Reduce(function(x, y)
merge(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
combined_df <- combined_df %>% select(
c('clean_state_name',
'clean_county_name',
'five_digit_fips',
exposure_cols)
exposed_8_hrs_0.005,
combined_df <- combined_df %>% select(
c('clean_state_name',
'clean_county_name',
'five_digit_fips',
exposure_cols))
combined_df <- combined_df %>% select(
c('clean_state_name',
'clean_county_name',
'five_digit_fips',
exposure_cols))
exposure_cols <- grep("^exposed", names(combined_df), value = TRUE)
combined_df <- combined_df %>% select(
c('clean_state_name',
'clean_county_name',
'five_digit_fips',
exposure_cols))
combined_df <- combined_df %>% select(
clean_state_name,
clean_county_name,
five_digit_fips,
all_of(exposure_cols))
dim(combined_df)
View(combined_df)
all_exposures <- list(exposure_8_hrs, exposure_4_hrs, exposure_12_hrs)
combined_df <- Reduce(function(x, y)
data.table::merge(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
?merge
library(data.table)
combined_df <- Reduce(function(x, y)
data.table::merge.data.table(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
combined_df <- Reduce(function(x, y)
data.table::merge.data.table(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
all_exposures <- list(exposure_8_hrs, exposure_4_hrs, exposure_12_hrs)
combined_df <- Reduce(function(x, y)
data.table::merge.data.table(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
colnames(exposure_12_hrs[[1]])
?Reduce
combined_df <- Reduce(function(x, y)
merge(x, y, by = c(
"clean_state_name", "clean_county_name", 'five_digit_fips', "day"
)), all_exposures)
source("/Volumes/squirrel-utopia 2/power_outage_national_cvd_hosp/code/data_prep/power_outage_exposure_data_prep/draft_test_play.R")
write_fst(
combined_df,
here(
"data",
"power_outage_exposure_data_cleaning_output",
"all_days_exposed_unexposed.fst"
)
)
